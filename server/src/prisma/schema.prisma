datasource db {
  url      = env("DATABASE_CONNECTION_STRING")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-ts"
}

enum UserRole {
  user
  admin
}

enum GameMode {
  solo
  squad
}

enum MatchStatus {
  incomplete
  complete
}

model User {
  userId              Int                   @id @default(autoincrement())
  firstName           String
  lastName            String
  username            String
  email               String                @unique
  password            String
  role                UserRole
  quizzesCreated      Quiz[]
  Match               MatchAndPlayer[]
  QuizAndCreater      QuizAndCreator[]
  PlayerQuestionScore PlayerQuestionScore[]
}

model MatchAndPlayer {
  userId  Int
  matchId Int
  user    User  @relation(fields: [userId], references: [userId])
  match   Match @relation(fields: [matchId], references: [matchId])

  @@id([userId, matchId])
}

model PlayerQuestionScore {
  id         Int      @default(autoincrement())
  userId     Int
  matchId    Int
  questionId Int
  quizId     String
  user       User     @relation(fields: [userId], references: [userId])
  match      Match    @relation(fields: [matchId], references: [matchId])
  question   Question @relation(fields: [questionId], references: [questionId])
  quiz       Quiz     @relation(fields: [quizId], references: [uuid])

  @@id([userId, matchId, questionId])
}

model QuizAndCreator {
  quizId String
  userId Int
  user   User   @relation(fields: [userId], references: [userId])
  quiz   Quiz   @relation(fields: [quizId], references: [uuid])

  @@id([userId, quizId])
}

model Quiz {
  uuid                String                @id
  createrEmail        String
  createdBy           User                  @relation(fields: [createrEmail], references: [email])
  questions           Question[]
  title               String
  description         String
  stars               Int
  QuizAndCreater      QuizAndCreator[]
  PlayerQuestionScore PlayerQuestionScore[]
}

model Question {
  questionId          Int                   @id
  quizId              String
  includedBy          Quiz                  @relation(fields: [quizId], references: [uuid])
  answers             Answer[]
  PlayerQuestionScore PlayerQuestionScore[]
}

model Answer {
  answerId   Int      @id
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [includedBy], references: [questionId])
  includedBy Int
}

model Match {
  matchId             Int                   @id
  startedAt           DateTime              @db.Time()
  endedAt             DateTime?             @db.Time()
  matchCode           String
  players             MatchAndPlayer[]
  matchStatus         MatchStatus
  PlayerQuestionScore PlayerQuestionScore[]
}
